version: "3.9"

services:
  postgres:
    image: ankane/pgvector:latest
    container_name: market_research_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-market_research}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password is required}
      POSTGRES_DB: ${POSTGRES_DB:-market_research_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-market_research} -d ${POSTGRES_DB:-market_research_db}"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: market_research_redis_prod
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  neo4j:
    build:
      context: .
      dockerfile: docker/neo4j/Dockerfile
    container_name: market_research_neo4j_prod
    environment:
      NEO4J_USERNAME: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:?Neo4j password is required}
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:?Neo4j password is required}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_SIZE:-2G}
      NEO4J_dbms_memory_pagecache_size: ${NEO4J_PAGECACHE_SIZE:-1G}
      NEO4J_server_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL:-1G}
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "cypher-shell -a bolt://localhost:7687 -u $${NEO4J_USERNAME} -p $${NEO4J_PASSWORD} --non-interactive 'RETURN 1;'"
        ]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 40s
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        TARGET: production
    container_name: market_research_migrate_prod
    command: ["alembic", "upgrade", "head"]
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-market_research}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-market_research_db}
      WAIT_FOR_POSTGRES: "true"
      WAIT_FOR_REDIS: "false"
      WAIT_FOR_NEO4J: "false"
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - backend

  neo4j-init:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        TARGET: production
    container_name: market_research_neo4j_init_prod
    command: ["python", "scripts/init_neo4j_indexes.py"]
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:?Neo4j password is required}
      WAIT_FOR_POSTGRES: "false"
      WAIT_FOR_REDIS: "false"
      WAIT_FOR_NEO4J: "true"
      WAIT_NEO4J_ATTEMPTS: 80
      WAIT_NEO4J_DELAY: 4
    env_file:
      - .env.production
    depends_on:
      neo4j:
        condition: service_healthy
    restart: "no"
    networks:
      - backend

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        TARGET: production
    container_name: market_research_api_prod
    command:
      - gunicorn
      - app.main:app
      - --worker-class
      - uvicorn.workers.UvicornWorker
      - --workers
      - "${GUNICORN_WORKERS:-4}"
      - --bind
      - 0.0.0.0:8000
      - --max-requests
      - "${GUNICORN_MAX_REQUESTS:-1000}"
      - --max-requests-jitter
      - "${GUNICORN_MAX_REQUESTS_JITTER:-100}"
      - --timeout
      - "${GUNICORN_TIMEOUT:-120}"
      - --graceful-timeout
      - "${GUNICORN_GRACEFUL_TIMEOUT:-30}"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-market_research}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-market_research_db}
      REDIS_URL: redis://redis:6379/0
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:?Neo4j password is required}
      WAIT_FOR_POSTGRES: "true"
      WAIT_FOR_REDIS: "true"
      WAIT_FOR_NEO4J: "true"
      BOOTSTRAP_COMMAND: ""
      ENVIRONMENT: production
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY:?SECRET_KEY is required in production}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://yourdomain.com}
    env_file:
      - .env.production
    volumes:
      - api_static:/app/static
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      neo4j-init:
        condition: service_completed_successfully
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 2G

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: market_research_frontend_prod
    ports:
      - "80:80"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    volumes:
      - nginx_logs:/var/log/nginx
    depends_on:
      api:
        condition: service_started
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  api_static:
  nginx_logs:

networks:
  backend:
