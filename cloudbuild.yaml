# ==============================================================================
# cloudbuild.yaml - Optimized CI/CD Pipeline
# ==============================================================================
# Pipeline stages:
# 1. BUILD: Docker image (frontend + backend) with layer caching
# 2. PUSH: Push to Artifact Registry
# 3. MIGRATE: Database migrations (before deploy)
# 4. DEPLOY: Cloud Run service
# 5. NEO4J INIT: Initialize vector indexes
# 6. SMOKE TESTS: Post-deployment verification (health + frontend)
#
# Total time: ~3-5 min (optimized with Docker cache)
# Code quality checks: Run locally (ruff, mypy, pytest)
# ==============================================================================

steps:
  # ==========================================================================
  # BUILD: Docker Image (Backend + Frontend) with caching
  # ==========================================================================
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.cloudrun'
      - '--cache-from'
      - 'europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:latest'
      - '-t'
      - 'europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:latest'
      - '-t'
      - 'europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:$COMMIT_SHA'
      - '.'
    id: 'build'
    waitFor: ['-']  # Start immediately (no tests blocking)

  # ==========================================================================
  # PUSH: Docker Image to Artifact Registry
  # ==========================================================================
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - 'europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight'
    id: 'push'
    waitFor: ['build']

  # ==========================================================================
  # MIGRATE: Database Migrations (BEFORE deploy)
  # ==========================================================================
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Run database migrations via Cloud Run Jobs
        # This ensures schema is up-to-date BEFORE deploying new code
        echo "üîÑ Running database migrations..."

        # Check if migration job exists, create if not
        if ! gcloud run jobs describe db-migrate --region=europe-central2 2>/dev/null; then
          echo "Creating migration job..."
          gcloud run jobs create db-migrate \
            --image=europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:latest \
            --region=europe-central2 \
            --add-cloudsql-instances=gen-lang-client-0508446677:europe-central2:sight \
            --set-secrets=DATABASE_URL=DATABASE_URL_CLOUD:latest \
            --command=alembic,upgrade,head \
            --max-retries=2 \
            --task-timeout=300
        else
          echo "Updating migration job image..."
          gcloud run jobs update db-migrate \
            --image=europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:latest \
            --region=europe-central2
        fi

        # Execute migrations
        echo "Executing migrations..."
        gcloud run jobs execute db-migrate --region=europe-central2 --wait

        # Check migration status
        if [ $$? -eq 0 ]; then
          echo "‚úÖ Migrations completed successfully"
        else
          echo "‚ùå Migrations failed - aborting deployment"
          exit 1
        fi
    id: 'migrate'
    waitFor: ['push']

  # ==========================================================================
  # DEPLOY: Cloud Run Service (sight)
  # ==========================================================================
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'sight'
      - '--image=europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:latest'
      - '--region=europe-central2'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=8080'
      - '--memory=2Gi'
      - '--cpu=2'  # Zwiƒôkszone do 2 vCPU dla lepszej performance (LLM + RAG)
      - '--cpu-boost'  # Startup CPU boost dla szybszego startu
      - '--timeout=300'
      - '--min-instances=0'
      - '--max-instances=5'
      - '--execution-environment=gen2'  # Gen2 runtime (nowszy, szybszy)
      - '--add-cloudsql-instances=gen-lang-client-0508446677:europe-central2:sight'
      - '--set-secrets=DATABASE_URL=DATABASE_URL_CLOUD:latest,GOOGLE_API_KEY=GOOGLE_API_KEY:latest,NEO4J_PASSWORD=NEO4J_PASSWORD:latest,NEO4J_URI=NEO4J_URI:latest,POSTGRES_PASSWORD=POSTGRES_PASSWORD:latest,REDIS_URL=REDIS_URL:latest,SECRET_KEY=SECRET_KEY:latest'
      # ALLOWED_ORIGINS removed - not needed for same-origin deployment (backend + frontend in same container)
      # See app/main.py:114-135 for explanation
      - '--set-env-vars=NEO4J_USER=neo4j,ENVIRONMENT=production,DEBUG=False,DEFAULT_LLM_PROVIDER=google,DEFAULT_MODEL=gemini-2.5-flash'
    id: 'deploy'
    waitFor: ['migrate']

  # ==========================================================================
  # NEO4J INIT: Initialize Neo4j Indexes (AFTER deploy)
  # ==========================================================================
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Initialize Neo4j indexes via Cloud Run Jobs
        # This ensures vector indexes exist for RAG system
        echo "üîÑ Initializing Neo4j indexes..."

        # Check if neo4j-init job exists, create if not
        if ! gcloud run jobs describe neo4j-init --region=europe-central2 2>/dev/null; then
          echo "Creating Neo4j init job..."
          gcloud run jobs create neo4j-init \
            --image=europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:latest \
            --region=europe-central2 \
            --set-secrets=NEO4J_URI=NEO4J_URI:latest,NEO4J_PASSWORD=NEO4J_PASSWORD:latest \
            --set-env-vars=NEO4J_USER=neo4j \
            --command=python,scripts/init_neo4j_cloudrun.py \
            --max-retries=3 \
            --task-timeout=300
        else
          echo "Updating Neo4j init job image..."
          gcloud run jobs update neo4j-init \
            --image=europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:latest \
            --region=europe-central2
        fi

        # Execute Neo4j initialization
        echo "Executing Neo4j index initialization..."
        gcloud run jobs execute neo4j-init --region=europe-central2 --wait

        # Check initialization status (non-fatal - RAG services have retry logic)
        if [ $$? -eq 0 ]; then
          echo "‚úÖ Neo4j indexes initialized successfully"
        else
          echo "‚ö†Ô∏è  Neo4j init failed - RAG features may be limited"
          echo "   Check logs: gcloud run jobs executions logs [EXECUTION_ID]"
          echo "   App will continue to run, but RAG functionality may be unavailable"
        fi
    id: 'neo4j-init'
    waitFor: ['deploy']

  # ==========================================================================
  # SMOKE TESTS: Post-deployment verification (simplified for speed)
  # ==========================================================================
  - name: 'gcr.io/cloud-builders/curl'
    id: 'smoke-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üî• Running smoke tests on deployed service..."

        # Get deployed service URL
        SERVICE_URL=$(gcloud run services describe sight --region=europe-central2 --format="value(status.url)")
        echo "Testing deployment at: $$SERVICE_URL"

        # Test 1: Health endpoint (backend API)
        echo "Test 1/2: Health check..."
        HEALTH_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" "$$SERVICE_URL/health" || echo "FAIL")
        if [ "$$HEALTH_STATUS" != "200" ]; then
          echo "‚ùå Health check FAILED (HTTP $$HEALTH_STATUS)"
          exit 1
        fi
        echo "‚úÖ Backend healthy"

        # Test 2: Frontend (React SPA)
        echo "Test 2/2: Frontend application..."
        FRONTEND_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" "$$SERVICE_URL/" || echo "FAIL")
        if [ "$$FRONTEND_STATUS" != "200" ]; then
          echo "‚ùå Frontend FAILED (HTTP $$FRONTEND_STATUS)"
          exit 1
        fi
        echo "‚úÖ Frontend accessible"

        # All tests passed
        echo ""
        echo "üéâ Smoke tests PASSED!"
        echo "   Deployment verified and healthy"
        echo "   Service URL: $$SERVICE_URL"
    waitFor: ['neo4j-init']

  # ==========================================================================
  # ROLLBACK: Automatic rollback if smoke tests failed
  # ==========================================================================
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'rollback-on-failure'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # This step only runs if previous step (smoke-tests) failed
        # Note: Cloud Build doesn't have native "on_failure" hooks, so we use a workaround:
        # If smoke tests passed, this step does nothing (exit 0)
        # If smoke tests failed, build already stopped (exit 1)
        #
        # For now, manual rollback is needed if deployment is broken
        # Future: Implement blue/green deployment with traffic splitting
        echo "‚ö†Ô∏è  Smoke tests failed - manual rollback may be needed"
        echo "   To rollback: gcloud run services update-traffic sight --to-revisions=PREVIOUS=100"
        exit 0
    waitFor: ['-']  # Run independently (manual trigger only)

# Output images
images:
  - 'europe-central2-docker.pkg.dev/gen-lang-client-0508446677/sight-containers/sight:latest'

# Build options
options:
  machineType: 'E2_HIGHCPU_8'  # Fast build (frontend + backend multi-stage)
  logging: CLOUD_LOGGING_ONLY

timeout: '3600s'
