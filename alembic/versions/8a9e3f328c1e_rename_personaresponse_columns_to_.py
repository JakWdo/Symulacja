"""Rename PersonaResponse columns to question_text and response_text, add response_time_ms

Revision ID: 8a9e3f328c1e
Revises: 2b95d9e2a1ab
Create Date: 2025-10-12 09:28:57.670267

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8a9e3f328c1e'
down_revision: Union[str, Sequence[str], None] = '2b95d9e2a1ab'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema with data migration."""
    # Step 1: Add new columns as nullable first
    op.add_column('persona_responses', sa.Column('question_text', sa.Text(), nullable=True))
    op.add_column('persona_responses', sa.Column('response_text', sa.Text(), nullable=True))
    op.add_column('persona_responses', sa.Column('response_time_ms', sa.Integer(), nullable=True))

    # Step 2: Migrate data from old columns to new columns
    op.execute("""
        UPDATE persona_responses
        SET question_text = question,
            response_text = response
    """)

    # Step 3: Make new columns NOT NULL (after data migration)
    op.alter_column('persona_responses', 'question_text', nullable=False)
    op.alter_column('persona_responses', 'response_text', nullable=False)

    # Step 4: Drop old columns
    op.drop_column('persona_responses', 'response')
    op.drop_column('persona_responses', 'question')
    op.drop_index(op.f('idx_projects_owner_id'), table_name='projects')
    op.create_index(op.f('ix_projects_owner_id'), 'projects', ['owner_id'], unique=False)
    op.drop_constraint(op.f('fk_projects_owner_id'), 'projects', type_='foreignkey')
    op.create_foreign_key(None, 'projects', 'users', ['owner_id'], ['id'])
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'last_login_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.alter_column('users', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'last_login_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'projects', type_='foreignkey')
    op.create_foreign_key(op.f('fk_projects_owner_id'), 'projects', 'users', ['owner_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_projects_owner_id'), table_name='projects')
    op.create_index(op.f('idx_projects_owner_id'), 'projects', ['owner_id'], unique=False)
    op.add_column('persona_responses', sa.Column('question', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('persona_responses', sa.Column('response', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_column('persona_responses', 'response_time_ms')
    op.drop_column('persona_responses', 'response_text')
    op.drop_column('persona_responses', 'question_text')
    # ### end Alembic commands ###
